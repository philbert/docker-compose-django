# Personal notes from James Turnbull's The Docker Book v1.9.1

docker-machine create -d openstack --openstack-flavor-name m1.small
--openstack-image-name centos-7-1511 --openstack-net-name lab-net
--openstack-floatingip-pool ext-net-01 --openstack-ssh-user centos
--openstack-sec-groups default,ssh,web drone

docker-machine create -d openstack --openstack-flavor-name m1.small --openstack-image-name centos-7-1511 --openstack-floatingip-pool ext-net-01 --openstack-ssh-user centos --openstack-keypair-name phil --openstack-private-key-file ~/.ssh/id_rsa --openstack-sec-groups docker-machine,default,http-https droneci

# see here for more details on compose
# https://realpython.com/blog/python/django-development-with-docker-compose-and-machine/
docker-compose build
docker-compose up -d
docker-compose up -d --force-recreate
docker-compose run webapp /usr/local/bin/python manage.py migrate
docker-compose build webapp
docker-compose up --no-deps -d webapp

@philbert there are a few different approaches you can take. The simplest will be to mount the docker daemon into your build http://readme.drone.io/usage/build_test/#volumes:fb92aa3346185c57f15afda861d465a3 . You can then invoke docker-compose commands from your build image (assuming docker-compose is available in your build image)

# create jenkins
docker run -d -p 8080:8080 -p 50000:50000 -v /var/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkins
docker run -d -p 8080:8080 -p 50000:50000 -v /var/jenkins:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock philbert_jenk

# see logs
docker logs --tail 10 <container name>
docker logs -f <container name>
docker logs --tail 0 -ft <container name>

# output logs to syslog
docker run --log-driver="syslog" --name daemon_dwayne -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"
# restart container if process dies
docker run --restart=always --name daemon_dave -d ubuntu bin/sh -c "while true; do echo hello world; sleep 1; done"
# restart 5 times on non-0 exit code max 5 times
docker run --restart=on-failure:5 --name daemon_dave -d ubuntu bin/sh -c "while true; do echo hello world; sleep 1; done"

# check process
docker top <container name>

# check stats
docker stats <container name>

# execute command (-d background)
docker exec -d <container name> touch /etc/new_config_file
docker exec -t -i <container name> /bin/bash

# find out details about container
docker inspect <container name>
docker inspect --format '{{.Name}} {{.State.Running}}' <container1> <continer2>

# remove all containers
docker rm `docker ps -a -q`
# remove all images
docker rmi `docker images -a -q`

# A note about building Dockerfiles:
# If building your Dockerfile stops for some reason (for example, if an
# instruction fails to complete), you will be left with an image you can use.
# This is highly useful for debugging: you can run a container from this image
# interactively and then debug why your instruction failed using the last image 
# created.

# see how docker image was built
docker history <image id>

# info about port mapping and binging
docker ps -l
CONTAINER       ID              IMAGE ...   PORTS                   NAMES
<containerid> phibert/static_web:latest ... 0.0.0.0:49154->80/tcp static_web
# port 49154 on the host is mapped to the container port of 80. We can get the
# same information with the docker port command.
docker port <containerid> 80
0.0.0.0:49154

# we can specify that Docker bind the port to a specific port:
docker run -d -p 80:80 --name static_web phibert/static_web \
nginx -g "daemon off;"
# This will bind port 80 on the container to port 80 on the local host.

# This command will bind port 8080 on the host to port 80 in the container
docker run -d -p 8080:80 --name static_web phibert/static_web \
nginx -g "daemon off;"

# Here we’ve bound port 80 of the container to port 80 on the 127.0.0.1
# interface on the local host.
docker run -d -p 127.0.0.1:80:80 --name static_web phibert/static_web \
nginx -g "daemon off;"

# Here we’ve removed the specific port to bind to on 127.0.0.1. We would now
# use the docker inspect or docker port command to see which random port was
# assigned to port 80 on the container.
docker run -d -p 127.0.0.1::80 --name static_web phibert/static_web \
nginx -g "daemon off;"

# You can bind UDP ports by adding the suffix /udp to the port binding.

# microservice best practice - one process per container
# in the Dockerfile, always specify ENTRYPOINT such as
ENTRYPOINT ["/usr/sbin/nginx"]
# and optionally
CMD ["-h"]
# this example will print the help menu from nginx. CMD is overriable during
# docker run, such as:
docker run -t -i phibert/static_web -g "daemon off;"
# If required at runtime, you can override the ENTRYPOINT instruction using
# the docker run command with --entrypoint flag.

# The WORKDIR instruction provides a way to set the working directory for the
# container and the ENTRYPOINT and/or CMD to be executed when a container is
# launched from the image. For example:
WORKDIR /opt/webapp/db
RUN bundle install
WORKDIR /opt/webapp
ENTRYPOINT [ "start_here" ]

# You can override the working directory at runtime with the -w flag, for example:
docker run -ti -w /var/log ubuntu pwd
/var/log

# The ENV instruction is used to set environment variables during the image
# build process. For example:
ENV RVM_PATH /home/rvm/
# This new environment variable will be used for any subsequent RUN
# instructions, as if we had specified an environment variable prefix 
# to a command like so:
RUN gem install unicorn
# would be executed as:
RVM_PATH=/home/rvm/ gem install unicorn
# You can also pass environment variables on the docker run command line using
# the -e flag. These variables will only apply at runtime, for example:
docker run -ti -e "WEB_PORT=8080" ubuntu env
HOME=/
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=123456asdfgh
TERM=xterm
WEB_PORT=8080

# The USER instruction specifies a user that the image should be run as; for example:
USER nginx
# This will cause containers created from the image to be run by the nginx user.
# We can specify a username or a UID and group or GID. Or even a combination
# thereof, for example:
USER user
USER user:group
USER uid
USER uid:gid
USER user:gid
USER uid:group
# You can also override this at runtime by specifying the -u flag with the docker
# run command. 
# NOTE: The default user if you don’t specify the USER instruction is root.

# The ADD instruction adds files and directories from our build environment into
# our image like so:
ADD software.license /opt/application/software.license
# will copy the file software.lic from the build directory to 
# /opt/application/software.license in the image.
# The source of the file can be a URL, filename, or directory 
# as long as it is inside the build context or environment.
# If a tar archive (valid archive types include gzip, bzip2, xz) is specified
# as the source file, then Docker will automatically unpack it for you:
ADD latest.tar.gz /var/www/wordpress/
# This does not work with URLS
# if the destination doesn’t exist, Docker will create the full path for us,
# including any directories. New files and directories will be created with a
# mode of 0755 and a UID and GID of 0

# the COPY instruction is purely focused on copying local files from the build
# context and does not have any extraction or decompression capabilities.
COPY conf.d/ /etc/apache2/
# Any files and directories created by the copy will have a UID and GID of 0. 

# The LABEL instruction adds metadata to a Docker image. The metadata is in the
# form of key/value pairs.
LABEL location="New York" type="Data Center" role="Web Server"
# view the labels by running docker inspect


# STOPSIGNAL instruction instruction sets the system call signal that will be sent
# to the container when you tell it to stop. This signal can be a valid number
# from the kernel syscall table, for instance 9, or a signal name in the format
# SIGNAME, for instance SIGKILL.

# The ARG instruction defines variables that can be passed at build-time via the
# docker build command. This is done using the --build-arg flag. You can only
# specify build-time arguments that have been defined in the DOCKERFILE.
ARG build
ARG webapp_user=user
# The second ARG instruction sets a default, if no value is specified for the
# argument at build-time then the default is used.
docker build --build-arg build=1234 -t phibert/webapp .
# Warning! Do not pass credentials using this method. It will be shown in the
# build history

# The ONBUILD instruction adds triggers to images. This is used to layer images
# between one build and another.
ONBUILD ADD . /app/src
ONBUILD RUN cd /app/src && make
# This would add an ONBUILD trigger to the image being created, which we can see
# when we run docker inspect on the image.
# These triggers are only inherited once, by children, and not grandchildren

# Docker volumes
# A volume is a specially designated directory within one or more containers
# that bypasses the Union File System to provide several useful features
# for persistent or shared data:
# Volumes can be shared and reused between containers.
# • A container doesn’t have to be running to share its volumes.
# • Changes to a volume are made directly.
# • Changes to a volume will not be included when you update an image.
# • Volumes persist until no containers use them
# This allows us to add data (like source code), a database, or other content 
# into an image without committing it to the image and allows us to share that 
# data between containers. This can be used to do testing with containers and
# an application’s code, manage logs, or handle databases inside a container

# launch new container from phich/django called webapp. New volume
# mounted from webapp directoy on host to directory /opt/webapp in container.
sudo docker run -d -p 3333 --name webapp \
-v $PWD/webapp:/opt/webapp phibert/django
# check what port on the docker host is 3333 in the container
docker port webapp 3333
0.0.0.0:49161

# make the container directory /var/www/html/website read-only
sudo docker run -d -p 80 --name website \
-v $PWD/website:/var/www/html/website:ro philbert/nginx nginx

# Connecting docker applications:
# 2 ways to do this:
# • docker network. Introduced in v1.9. Works across docker hosts
# • docker links. Legacy, only works on single host. Don't use this.

# Containers using Docker Networking can be stopped, started and restarted 
# without needing to update connections. Links have a problem with this.
# You don't need to create containers before connecting to Docker Newtork.
# This means you don't need to worry about the order you run containers

# List available docker networks
sudo docker network ls

# create a container on the app network
sudo docker run -d --net=app --name db philbert/redis

# inspect a docker network
sudo docker network inspect bridge
